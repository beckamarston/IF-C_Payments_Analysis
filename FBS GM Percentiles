# ----------------------------------------------------------------------------------------------
# STEP 0: Preamble
# ----------------------------------------------------------------------------------------------

tictoc::tic()
# clear workspace
rm(list=ls())

# set working directory
setwd(dir="//Ler365fs/fbs2/Users/TASPrototype/Non FBS Staff analysis/Rebecca Marston/Uplift Methodologies")

# loading packages
library(tidyverse)
library(ggplot2)
library(readxl)
library(dplyr)
library(ggplot2)
library(openxlsx)
library(FBSCore)
library(survey)
library(openxlsx)

# ----------------------------------------------------------------------------------------------
# STEP 1: Construct 3 year matched dataset
# ----------------------------------------------------------------------------------------------

# bring in weights for 3 year matched
fbsdata <- readRDS("//Ler365fs/fbs2/Users/TASPrototype/Non FBS Staff analysis/Rebecca Marston/fbs_england_17_18_to_19_20_matched_3yr_sample_reweighted.rds")

# list of variables to extract and then 3 year average below (those whose names we have from the CalculatedVariablesDefinition spreadsheet)
varlist1 <- c(
  # general farm variables
  "UAA", 
  "area.farmed", 
  "labour.force",
  "farmer.spouse.AWU",
  "FPD.AWU",
  "FPD.spouses.AWU",
  "unpaid.regular.AWU",
  "unpaid.casual.AWU",
  "manager.AWU",
  "paid.whole.time.AWU",
  "paid.part.time.AWU",
  "paid.casual.AWU",
  "trainee.AWU",
  "AWU",
  "AWU.check",
  "adjusted.AWU",
  "FBI",
  "farm.business.output",
  "farm.business.variable.costs",
  "farm.business.fixed.costs",
  "agriculture.gross.margin",
  "agriculture.income", 
  "output.from.agriculture",
  "agriculture.fixed.costs",
  "agriculture.variable.costs",
  "agriculture.unpaid.labour",
  "BPS.income",
  "basic.payment.scheme",
  "agri.environment.income",
  "agri.environment.payments",
  "diversified.income",
  "diversified.output",
  "performance.ratio",
  "total.area")

# variables to extract (in addition to the standard ones)
spec <- tibble(variable = c(varlist1),
               name = c(rep(NA,length(varlist1))))


# extract 3 years of data
# MA: we really need to get the FBS into a proper database. This takes around 1.5 minutes to run.
# MA: you might get more mileage with these data in long format.
years <- seq(2017, 2019)
for (i in years){
  extract <- extract_spec(year = i,
                          spec = spec,
                          fbs_spreadsheet = TRUE,
                          country = "england")
  colnames(extract)[2:length(colnames(extract))] <- paste("X.",
                                                          substring(as.character(i),3,4),
                                                          sep = "",
                                                          colnames(extract)[2:length(colnames(extract))])
  fbsdata <- left_join(fbsdata,
                       extract)
}
# write to exel
write.xlsx(fbsdata, file = "_date_fbsdata1.xlsx", sheetName = "sheet1", append = FALSE)

# Clean data --------------------------------------------------------------

# 3 year average function
av_3year <- function(dat, item, years = 2017:2019){
  years %>%
    substr(start = 3, stop = 4) %>%
    paste0("X.", ., item) %>%
    subset(dat, select = .) %>%
    rowMeans()}

# calculate averages
for (v in c(varlist1)){
  fbsdata[paste0(v)] = av_3year(fbsdata,v)
}

# remove annual data (keeping only the 3 year averages)
fbsdata1 <- fbsdata %>% select(-starts_with('X.'))

# remove farms with UAA< 5ha from the sample, and create new variables (Â£ per ha)
fbsdata2 <- fbsdata1 %>%                             
  filter(UAA>=5) %>% 
  mutate(agriculture.income.per.ha = agriculture.income/UAA, 
         agriculture.gross.margin.per.ha = agriculture.gross.margin/UAA)

# write to exel
write.xlsx(fbsdata, file = "-date_fbsdata2.xlsx", sheetName = "sheet1", append = FALSE)

# ----------------------------------------------------------------------------------------------
# STEP 2: Create Groupings
# ----------------------------------------------------------------------------------------------

# create new farm type grouping variables 
fbsdata3 <- fbsdata2 %>% 
  mutate(base_system_type = ifelse(type %in% c("Cereals", "General Cropping", "Horticulture"),
                                   "BS_Arable",
                                   ifelse(type %in% c("LFA Grazing Livestock", "Dairy", "Lowland Grazing Livestock"),
                                          "BS_Livestock",
                                          "other")))

fbsdata3 <- fbsdata3 %>% 
  mutate(base_system_type_2 = ifelse(type %in% c("Cereals", "General Cropping"),
                                     "BS_Arable",
                                     ifelse(type %in% c("LFA Grazing Livestock", "Lowland Grazing Livestock"),
                                            "BS_Livestock",
                                            "other")))
fbsdata3 <- fbsdata3 %>% 
  mutate(base_system_type_3 = ifelse(type %in% c("Cereals", "General Cropping", "Horticulture"),
                                   "BS_Arable",
                                   ifelse(type %in% c("Dairy", "Lowland Grazing Livestock"),
                                          "BS_Livestock",
                                          "other")))
# ----------------------------------------------------------------------------------------------
# STEP 3: Weighted Percentiles (Christine's Code)
# ----------------------------------------------------------------------------------------------
### Ensure the correct weight is being supplied to the survey design, in this case "newwt3yr"
# as it is the three year matched dataset and using the newly calculated columns as your input 
# rather than the single year values with the prefixes.

# Getting error when using survey package - workaround 
options(survey.adjust.domain.lonely=TRUE)
options(survey.lonely.psu="remove")

# Add new variables to the var list 
#varlist1 <- c("agriculture.income.per.ha",
# "agriculture.gross.margin.per.ha",
# "newwt3yr",
# "base_system_type",
# "base_system_type_2")

design <- svydesign(id = ~ farms,
                    strata = ~ stratum,
                    fpc =  ~ num.pop,
                    data = fbsdata3,
                    weight = ~ newwt3yr,
                    nest = TRUE)


# calculating some values 
means <- mean_byfac(vars = varlist1,
                    factor = "type",
                    design = design)

totals <- total_byfac(vars = varlist1,
                      factor = "type",
                      design = design)

totals_bs_type1 <- total_byfac(vars = varlist1,
                               factor = "base_system_type",
                               design = design)

totals_bs_type2 <- total_byfac(vars = varlist1,
                               factor = "base_system_type_2",
                               design = design)

# write to csv
#write.csv(totals_bs_type1, "weighted_totals_bs1.csv")
#write.csv(totals_bs_type2, "weighted_totals_bs2.csv")


# Getting Percentiles -----------------------------------------------------

# get un-weighted percentiles
unweight_quantile_incomeperha <- quantile(fbsdata2$agriculture.income.per.ha,c(.1,.2,.3,.4,.5,.6,.7,.8,.9))
unweighted_qauntile_gmperha <- quantile(fbsdata2$agriculture.gross.margin.per.ha,c(.1,.2,.3,.4,.5,.6,.7,.8,.9))

# get weighted percentiles 
gmperha_weighted_quantiles <- svyquantile(x = ~agriculture.gross.margin.per.ha, 
                                          design = design, 
                                          quantiles = c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1), 
                                          alpha=0.05,
                                          ci=FALSE)

gmperha_weighted_quantiles_ci <- svyquantile(x = ~agriculture.gross.margin.per.ha, 
                                             design = design, 
                                             quantiles = c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1), 
                                             alpha=0.05,
                                             ci=TRUE)

#write an csv file--------------------------------------------------------------
#write.csv(gmperha_weighted_quantiles, "gmperha_weighted_quantiles.csv")
#write.csv(gmperha_weighted_quantiles_ci[2], "gmperha_weighted_quantiles_ci.csv")

# Get weighted quantiles per farm type -------------------------------------------------
quantiles_farm_type_gm <- svyby(~agriculture.gross.margin.per.ha, 
                                ~type, 
                                design,
                                svyquantile, 
                                quantiles=c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1),
                                ci=TRUE,
                                vartype="ci")

# write to csv file                             
write.csv(quantiles_farm_type_gm, "gmperha_quantiles_farmtype.csv") 

# Get weighted percentiles per base system type ---------------------------
#Base system types 1
quantiles_bs_gm <- svyby(~agriculture.gross.margin.per.ha, 
                         ~base_system_type, 
                         design,
                         svyquantile, 
                         quantiles=c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1),
                         ci=TRUE,
                         vartype="ci")

#Base system types 2 
quantiles_bs_2_gm <- svyby(~agriculture.gross.margin.per.ha, 
                           ~base_system_type_2, 
                           design,
                           svyquantile, 
                           quantiles=c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1),
                           ci=TRUE,
                           vartype="ci")


#Base system types 3 
quantiles_bs_2_gm <- svyby(~agriculture.gross.margin.per.ha, 
                           ~base_system_type_3, 
                           design,
                           svyquantile, 
                           quantiles=c(0,.1,.2,.25,.3,.4,.5,.55,.6,.7,.75,.8,.9,1),
                           ci=TRUE,
                           vartype="ci")

# write to csv files                             
write.csv(quantiles_bs_gm , "gmperha_quantiles_bs.csv") 
write.csv(quantiles_bs_2_gm , "gmperha_quantiles_bs_2.csv") 
write.csv(quantiles_bs_2_gm , "gmperha_quantiles_bs_3.csv") 
